require 'rails_helper'
require 'rps_client'

RSpec.describe RpsClient do
  describe "api returns Success and a weapon" do
    before { allow(described_class).to receive(:url).and_return(mock_url) }

    let(:mock_url) { "https://private-17f6a4-curbrockpaperscissors.apiary-mock.com/rps-stage/throw" }
    let(:weapon_from_api_success_response) do
      {
        statusCode: 200,
        message: "Generated by api",
        body: "rock"
      }
    end

    it ".fetch_opponent_choice returns api's success response" do
      VCR.use_cassette("server_success") do
        expect(described_class.fetch_opponent_choice).to eq(weapon_from_api_success_response)
      end
    end
  end

  describe "api returns Server Error" do
    before do
      allow(described_class).to receive(:url).and_return(production_url)
      allow_any_instance_of(Array).to receive(:sample).and_return("rock")
    end

    let(:production_url) { "https://5eddt4q9dk.execute-api.us-east-1.amazonaws.com/rps-stage/throw" }
    let(:server_error_response) do
      {
        statusCode: 500,
        message: "Internal server error"
      }
    end
    let(:weapon_generated_locally_success_response) do
      {
        statusCode: 200,
        message: "Generated locally",
        body: "rock"
      }
    end

    it ".get(url) returns Internal server error" do
      VCR.use_cassette("server_error") do
        expect(described_class.get(described_class.url)).to eq(server_error_response)
      end
    end

    it ".fetch_opponent_choice generates throw locally" do
      VCR.use_cassette("server_error") do
        expect(described_class.fetch_opponent_choice).to eq(weapon_generated_locally_success_response)
      end
    end
  end
end
